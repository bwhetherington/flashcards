let readFromFile,randomCard,isCorrectEn,isCorrectDe,input;_448‍.w("./flashcard",[["readFromFile",["readFromFile"],function(v){readFromFile=v}],["randomCard",["randomCard"],function(v){randomCard=v}],["isCorrectEn",["isCorrectEn"],function(v){isCorrectEn=v}],["isCorrectDe",["isCorrectDe"],function(v){isCorrectDe=v}]]);_448‍.w("./util",[["input",["input"],function(v){input=v}]]);// ESM syntax is supported.




async function main() {
  const original = await readFromFile('./cards.json');
  let cards = [...original];

  // English
  _448‍.g.console.log('GERMAN -> ENGLISH')
  while (cards.length > 0) {
    const card = randomCard(cards);
    const ans = await input(`${card.de}: `);
    const isCorrect = isCorrectEn(card, ans);
    if (isCorrect) {
      _448‍.g.console.log('Correct!');
    } else {
      _448‍.g.console.log(`Incorrect. The correct answer was "${card.en}".`);
    }
    cards = cards.filter(item => item != card);
  }

  // German
  _448‍.g.console.log('ENGLISH -> GERMAN');
  cards = [...original];
  while (cards.length > 0) {
    const card = randomCard(cards);
    const ans = await input(`${card.en}: `);
    const isCorrect = isCorrectDe(card, ans);
    if (isCorrect) {
      _448‍.g.console.log('Correct!');
    } else {
      _448‍.g.console.log(`Incorrect. The correct answer was "${card.de}".`);
    }
    cards = cards.filter(item => item != card);
  }
}

main();
